trigger:
  branches:
    include:
      - main # Déclenche le pipeline uniquement sur la branche principale.

variables:
  serviceConnection: 'SC-TP3'
  resourceGroupName: 'rg-tp3-devops'
  location: 'canadacentral'
  sku: 'TP3'
  BuildConfiguration: 'Release'

stages:
  - stage: Build
    displayName: "Build Stage"
    jobs:
      - job: BuildAPIs
        displayName: "Build All APIs"
        pool:
          vmImage: 'windows-latest'
        steps:
          # Build Interet API
          - task: DotNetCoreCLI@2
            displayName: "Build API - Interet"
            inputs:
              command: 'build'
              projects: 'CalculInterets.API/**/*.csproj'
              arguments: '-c Release -o $(Build.ArtifactStagingDirectory)/CalculInterets.API/Release'

          - task: ArchiveFiles@2
            displayName: "Créer le package ZIP pour Interet API"
            inputs:
              rootFolderOrFile: '$(System.ArtifactStagingDirectory)/CalculInterets.API/$(BuildConfiguration)'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/CalculInterets.API.zip'
              replaceExistingArchive: true

          - task: PublishPipelineArtifact@1
            displayName: "Publier l'artefact pour Interet API"
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)/CalculInterets.API.zip'
              artifact: 'CalculInterets.API'

          # Build Assurance API
          - task: DotNetCoreCLI@2
            displayName: "Build API - Assurance"
            inputs:
              command: 'build'
              projects: 'Assurances.API/**/*.csproj'

          - task: ArchiveFiles@2
            displayName: "Créer le package ZIP pour Assurance API"
            inputs:
              rootFolderOrFile: '$(System.ArtifactStagingDirectory)/Assurances.API/$(BuildConfiguration)'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/Assurances.API.zip'
              replaceExistingArchive: true

          - task: PublishPipelineArtifact@1
            displayName: "Publier l'artefact pour Assurance API"
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)/Assurances.API.zip'
              artifact: 'Assurances.API'

          # Build Credit API
          - task: DotNetCoreCLI@2
            displayName: "Build API - Credit"
            inputs:
              command: 'build'
              projects: 'CarteDeCredit.API/**/*.csproj'

          - task: ArchiveFiles@2
            displayName: "Créer le package ZIP pour Credit API"
            inputs:
              rootFolderOrFile: '$(System.ArtifactStagingDirectory)/CarteDeCredit.API/$(BuildConfiguration)'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/CarteDeCredit.API.zip'
              replaceExistingArchive: true

          - task: PublishPipelineArtifact@1
            displayName: "Publier l'artefact pour Credit API"
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)/CarteDeCredit.API.zip'
              artifact: 'CarteDeCredit.API'

      - job: BuildMVC
        displayName: "Build MVC Application"
        dependsOn: BuildAPIs
        condition: succeeded()
        pool:
          vmImage: 'windows-latest'
        steps:
          - task: DotNetCoreCLI@2
            displayName: "Build MVC Application"
            inputs:
              command: 'build'
              projects: 'BanqueTardi/**/*.csproj'

          - task: ArchiveFiles@2
            displayName: "Créer le package ZIP pour MVC Application"
            inputs:
              rootFolderOrFile: '$(System.ArtifactStagingDirectory)/BanqueTardi/$(BuildConfiguration)'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/BanqueTardi.zip'
              replaceExistingArchive: true

          - task: PublishPipelineArtifact@1
            displayName: "Publier l'artefact pour MVC Application"
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)/BanqueTardi.zip'
              artifact: 'BanqueTardi'

  - stage: DeployDev
    displayName: "Deploy to Development"
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: DeployInteretAPI
        displayName: "Deploy API - Interet to Dev"
        pool:
          vmImage: 'windows-latest'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: "Télécharger l'artefact pour Interet API"
            inputs:
              artifact: 'CalculInterets.API'
              path: '$(Pipeline.Workspace)'

          - task: AzureWebApp@1
            displayName: "Deploy API - Interet"
            inputs:
              azureSubscription: $(serviceConnection)
              appType: 'webApp'
              appName: 'webapp-api-interet-dev'
              package: '$(Pipeline.Workspace)/CalculInterets.API.zip'

      - job: DeployAssuranceAPI
        displayName: "Deploy API - Assurance to Dev"
        pool:
          vmImage: 'windows-latest'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: "Télécharger l'artefact pour Assurance API"
            inputs:
              artifact: 'Assurances.API'
              path: '$(Pipeline.Workspace)'

          - task: AzureWebApp@1
            displayName: "Deploy API - Assurance"
            inputs:
              azureSubscription: $(serviceConnection)
              appType: 'webApp'
              appName: 'webapp-api-assurance-dev'
              package: '$(Pipeline.Workspace)/Assurances.API.zip'

      - job: DeployCreditAPI
        displayName: "Deploy API - Credit to Dev"
        pool:
          vmImage: 'windows-latest'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: "Télécharger l'artefact pour Credit API"
            inputs:
              artifact: 'CarteDeCredit.API'
              path: '$(Pipeline.Workspace)'

          - task: AzureWebApp@1
            displayName: "Deploy API - Credit"
            inputs:
              azureSubscription: $(serviceConnection)
              appType: 'webApp'
              appName: 'webapp-api-credit-dev'
              package: '$(Pipeline.Workspace)/CarteDeCredit.API.zip'

      - job: DeployMVCtoDev
        displayName: "Deploy MVC to Dev"
        dependsOn: 
          - DeployInteretAPI
          - DeployAssuranceAPI
          - DeployCreditAPI
        condition: succeeded()
        pool:
          vmImage: 'windows-latest'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: "Télécharger l'artefact pour MVC Application"
            inputs:
              artifact: 'BanqueTardi'
              path: '$(Pipeline.Workspace)'

          - task: AzureWebApp@1
            displayName: "Deploy MVC Application"
            inputs:
              azureSubscription: $(serviceConnection)
              appType: 'webApp'
              appName: 'webapp-tp3'
              package: '$(Pipeline.Workspace)/BanqueTardi.zip'
